@model TechBlog.Web.Models.BlogPostViewModel

@{
    ViewData["Title"] = Model.Post.Title + " - TechBlog";
}

<div class="container py-4">
    <!-- Post Content -->
    <div class="row">
        <div class="col-lg-8">
            <article class="card shadow-sm">
                @if (!string.IsNullOrEmpty(Model.Post.FeaturedImageUrl))
                {
                    <img src="@Model.Post.FeaturedImageUrl" class="card-img-top" style="height: 300px; object-fit: cover;" alt="@Model.Post.Title">
                }
                <div class="card-body">
                    <div class="post-header mb-4">
                        <h1 class="display-5 fw-bold mb-3">@Model.Post.Title</h1>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-user-circle me-2 text-muted"></i>
                                <span class="text-muted">By @Model.Post.AuthorName</span>
                                <span class="mx-2 text-muted">â€¢</span>
                                <i class="fas fa-calendar me-1 text-muted"></i>
                                <span class="text-muted">@Model.Post.CreatedAt.ToString("MMMM dd, yyyy")</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-eye me-1 text-muted"></i>
                                <span class="text-muted">@Model.Post.ViewCount views</span>
                            </div>
                        </div>
                        <div class="d-flex align-items-center mb-3">
                            <span class="badge bg-primary me-2">@Model.Post.CategoryName</span>
                            @if (Model.Post.Tags.Any())
                            {
                                @foreach (var tag in Model.Post.Tags)
                                {
                                    <a asp-controller="Blog" asp-action="Tag" asp-route-slug="@tag" class="badge bg-light text-dark text-decoration-none me-1">#@tag</a>
                                }
                            }
                        </div>
                    </div>

                    <!-- Post Summary -->
                    @if (!string.IsNullOrEmpty(Model.Post.Summary))
                    {
                        <div class="alert alert-light border-start border-primary border-4 mb-4">
                            <p class="mb-0 fw-semibold">@Model.Post.Summary</p>
                        </div>
                    }

                    <!-- Post Content -->
                    <div class="post-content">
                        @Html.Raw(Model.Post.Content)
                    </div>
                </div>
            </article>

            <!-- Related Posts -->
            @if (Model.RelatedPosts.Any())
            {
                <section class="mb-4">
                    <h3 class="mb-3">
                        <i class="fas fa-newspaper me-2"></i>Related Posts
                    </h3>
                    <div class="row">
                        @foreach (var relatedPost in Model.RelatedPosts)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card h-100 shadow-sm">
                                    <div class="card-body">
                                        <span class="badge bg-primary mb-2">@relatedPost.CategoryName</span>
                                        <h6 class="card-title">
                                            <a href="/blog/@relatedPost.Slug" class="text-decoration-none">@relatedPost.Title</a>
                                        </h6>
                                        <p class="card-text small">@relatedPost.Summary</p>
                                        <small class="text-muted">
                                            <i class="fas fa-calendar me-1"></i>@relatedPost.CreatedAt.ToString("MMM dd")
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Navigation -->
            <div class="card mb-4">
                <div class="card-body">
                    <a asp-controller="Blog" asp-action="Index" class="btn btn-outline-primary w-100 mb-2">
                        <i class="fas fa-arrow-left me-2"></i>Back to All Posts
                    </a>
                    <a asp-controller="Blog" asp-action="Category" asp-route-slug="@Model.Post.CategorySlug" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-folder me-2"></i>More in @Model.Post.CategoryName
                    </a>
                </div>
            </div>

            <!-- Share -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-share me-2"></i>Share This Post
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-sm" onclick="sharePost('twitter')">
                            <i class="fab fa-twitter me-2"></i>Share on Twitter
                        </button>
                        <button class="btn btn-primary btn-sm" onclick="sharePost('facebook')">
                            <i class="fab fa-facebook me-2"></i>Share on Facebook
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="copyLink()">
                            <i class="fas fa-link me-2"></i>Copy Link
                        </button>
                    </div>
                </div>
            </div>

            <!-- Post Info -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-info-circle me-2"></i>Post Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <strong>Published:</strong> @Model.Post.CreatedAt.ToString("MMMM dd, yyyy")
                    </div>
                    @if (Model.Post.UpdatedAt.HasValue)
                    {
                        <div class="mb-2">
                            <strong>Updated:</strong> @Model.Post.UpdatedAt.Value.ToString("MMMM dd, yyyy")
                        </div>
                    }
                    <div class="mb-2">
                        <strong>Category:</strong> 
                        <a asp-controller="Blog" asp-action="Category" asp-route-slug="@Model.Post.CategorySlug" class="text-decoration-none">@Model.Post.CategoryName</a>
                    </div>
                    <div class="mb-2">
                        <strong>Views:</strong> @Model.Post.ViewCount
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Comments Section -->
    <div class="row mt-5">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-comments me-2"></i>
                        <span class="comment-count">Comments (@(Model.Post.Comments?.Count() ?? 0))</span>
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Comment Form -->
                    <div class="mb-4">
                        <h6>Leave a Comment</h6>
                        <form id="commentForm" asp-controller="Blog" asp-action="AddComment" method="post" data-ajax="true" data-ajax-method="POST" data-ajax-success="onCommentSuccess" data-ajax-failure="onCommentFailure">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="PostId" value="@Model.Post.Id" />
                            <input type="hidden" name="ParentCommentId" id="parentCommentId" value="" />
                            <div id="replyingTo" class="alert alert-info py-2 px-3 d-none">
                                Replying to <strong id="replyingToName"></strong>
                                <button type="button" id="cancelReply" class="btn btn-sm btn-link">Cancel</button>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <input type="text" class="form-control" name="AuthorName" id="authorName" placeholder="Your Name" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <input type="email" class="form-control" name="AuthorEmail" id="authorEmail" placeholder="Your Email" required>
                                </div>
                            </div>
                            <div class="mb-3">
                                <textarea class="form-control" name="Content" id="commentContent" rows="4" placeholder="Write your comment..." required></textarea>
                                <div class="invalid-feedback">Please enter your comment.</div>
                            </div>
                            <!-- reCAPTCHA v2 -->
                            @{
                                var recaptchaSiteKey = ViewData["RecaptchaSiteKey"]?.ToString();
                                var recaptchaEnabled = ViewData["RecaptchaEnabled"] as bool? ?? false;
                                
                                if (!string.IsNullOrEmpty(recaptchaSiteKey) && recaptchaEnabled)
                                {
                                    <div class="mb-3">
                                        <div class="form-group">
                                            <div class="g-recaptcha" data-sitekey="@recaptchaSiteKey" data-callback="onRecaptchaSuccess" data-expired-callback="onRecaptchaExpired" data-error-callback="onRecaptchaError"></div>
                                            <div class="form-text small text-muted mt-1">Please complete the reCAPTCHA to submit your comment.</div>
                                            <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response" />
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        reCAPTCHA is not properly configured. Please contact the site administrator.
                                    </div>
                                    <script>
                                        console.warn('reCAPTCHA not properly configured. SiteKey: @(recaptchaSiteKey ?? "null"), Enabled: @recaptchaEnabled');
                                    </script>
                                }
                            }
                            
                            <button type="submit" class="btn btn-primary" id="submitComment">
                                <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                <i class="fas fa-paper-plane me-2"></i>Post Comment
                            </button>
                            <div id="commentError" class="alert alert-danger mt-2 d-none" role="alert"></div>
                            <div id="commentSuccess" class="alert alert-success mt-2 d-none" role="alert">
                                Comment submitted successfully! It will be visible after moderation.
                            </div>
                        </form>
                    </div>

                    <!-- Comments List -->
                    <div id="commentsList"></div>
                    <div class="mt-2">
                        <button id="loadMoreComments" class="btn btn-outline-secondary btn-sm d-none">
                            <i class="fas fa-chevron-down me-1"></i>Load more comments
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery-ajax-unobtrusive@3.2.6/dist/jquery.unobtrusive-ajax.min.js"></script>
    
    @if (ViewData["RecaptchaSiteKey"] != null && !string.IsNullOrEmpty(ViewData["RecaptchaSiteKey"]?.ToString()))
    {
        <script>
            // reCAPTCHA callback functions
            function onRecaptchaSuccess(token) {
                console.log('reCAPTCHA verified');
                document.getElementById('g-recaptcha-response').value = token;
            }
            
            function onRecaptchaExpired() {
                console.log('reCAPTCHA expired');
                document.getElementById('g-recaptcha-response').value = '';
            }
            
            function onRecaptchaError() {
                console.error('reCAPTCHA error');
                document.getElementById('g-recaptcha-response').value = '';
            }
            
            // This function will be called when reCAPTCHA loads
            function onRecaptchaLoad() {
                console.log('reCAPTCHA v2 loaded');
                // The reCAPTCHA v2 widget will auto-render
            }
        </script>
        <!-- Load reCAPTCHA v2 -->
        <script src="https://www.google.com/recaptcha/api.js?onload=onRecaptchaLoad&render=explicit" async defer></script>
    }
    
    <script>
        // Function to handle form submission with reCAPTCHA validation
        $(document).ready(function() {
            const $commentForm = $('#commentForm');
            const $submitButton = $('#submitComment');
            const $spinner = $submitButton.find('.spinner-border');
            
            // Store original button HTML
            const originalButtonHtml = $submitButton.html();
            
            // Function to submit the form
            function submitForm() {
                // Disable submit button and show spinner
                $submitButton.prop('disabled', true);
                $spinner.removeClass('d-none');
                
                // Clear any previous error messages
                $('#commentError').addClass('d-none');
                
                // Check if reCAPTCHA is enabled and completed
                const recaptchaResponse = document.getElementById('g-recaptcha-response').value;
                const recaptchaSiteKey = '@(ViewData["RecaptchaSiteKey"]?.ToString() ?? "")';
                
                if (recaptchaSiteKey && !recaptchaResponse) {
                    // Show error and scroll to reCAPTCHA
                    const errorMsg = 'Please complete the reCAPTCHA verification.';
                    const $error = $('#commentError').text(errorMsg).removeClass('d-none');
                    
                    // Scroll to reCAPTCHA
                    $('html, body').animate({
                        scrollTop: $('.g-recaptcha').offset().top - 100
                    }, 500);
                    
                    $submitButton.prop('disabled', false);
                    $spinner.addClass('d-none');
                    return;
                }
                
                // Add reCAPTCHA response to form data if available
                let formData = $commentForm.serializeArray();
                if (recaptchaResponse) {
                    formData.push({ name: 'g-recaptcha-response', value: recaptchaResponse });
                }
                
                // Submit the form via AJAX
                $.ajax({
                    url: $commentForm.attr('action'),
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            onCommentSuccess(response);
                            // Reset reCAPTCHA after successful submission
                            if (typeof grecaptcha !== 'undefined') {
                                grecaptcha.reset();
                            }
                        } else {
                            onCommentFailure(response);
                        }
                    },
                    error: function(xhr, status, error) {
                        onCommentFailure({ message: 'An error occurred while submitting your comment. Please try again.' });
                    },
                    complete: function() {
                        // Re-enable submit button and hide spinner
                        $submitButton.prop('disabled', false);
                        $spinner.addClass('d-none');
                    }
                });
            }
            
            // Handle form submission
            $commentForm.on('submit', function(e) {
                e.preventDefault();
                
                // Check if reCAPTCHA is enabled
                @if (ViewData["RecaptchaSiteKey"] != null && !string.IsNullOrEmpty(ViewData["RecaptchaSiteKey"]?.ToString()))
                {
                    @:if (typeof grecaptcha === 'undefined') {
                    @:    // If reCAPTCHA isn't loaded yet, store the submission and wait for it
                    @:    window.pendingFormSubmission = submitForm;
                    @:    return false;
                    @:}
                    @:
                    @:// Check if reCAPTCHA is completed
                    @:const recaptchaResponse = grecaptcha.getResponse();
                    @:if (!recaptchaResponse) {
                    @:    // Show error message
                    @:    $('.field-validation-valid[data-valmsg-for="g-recaptcha-response"]')
                    @:        .addClass('field-validation-error')
                    @:        .removeClass('field-validation-valid')
                    @:        .html('Please complete the reCAPTCHA.');
                    @:    return false;
                    @:}
                }
                
                // If we get here, either reCAPTCHA is not enabled or it's completed
                submitForm();
            });
            
            // Set a timeout to check if reCAPTCHA loaded
            if (typeof grecaptcha === 'undefined') {
                setTimeout(function() {
                    if (typeof grecaptcha === 'undefined') {
                        console.error('reCAPTCHA failed to load');
                        // Show error to user
                        const errorHtml = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                reCAPTCHA failed to load. Please refresh the page or check your connection.
                            </div>
                        `;
                        $('.g-recaptcha').closest('.form-group').html(errorHtml);
                    }
                }, 10000); // 10 seconds timeout
            }
        });
        
        function onCommentSuccess(response) {
            if (response.success) {
                // Reset form and reCAPTCHA
                $('#commentForm')[0].reset();
                if (typeof grecaptcha !== 'undefined') {
                    grecaptcha.reset();
                }
                
                // Show success message
                $('#commentError').addClass('d-none');
                $('#commentSuccess').removeClass('d-none');
                
                // Add the new comment to the top of the list
                const comment = response.comment;
                const baseClasses = 'border-bottom pb-3 mb-3';
                const indentClass = comment.parentCommentId ? 'ms-5' : '';
                const commentHtml = `
                    <div class="comment-item ${baseClasses} ${indentClass}" data-comment-id="${comment.id}" data-author-name="${comment.authorName}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="d-flex">
                                <div class="me-3">
                                    <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        ${comment.authorName.substring(0, 1).toUpperCase()}
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-1">${comment.authorName} ${comment.isAdmin ? '<span class="badge bg-primary">Author</span>' : ''}</h6>
                                    <p class="text-muted small mb-1">${comment.createdAt}</p>
                                    <p class="mb-0">${comment.content}</p>
                                    <button type="button" class="btn btn-link p-0 mt-1 comment-reply-btn">Reply</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                
                // Insert as reply or as top-level
                if (comment.parentCommentId) {
                    const $parent = $(`#commentsList .comment-item[data-comment-id='${comment.parentCommentId}']`);
                    if ($parent.length) {
                        $parent.after(commentHtml);
                    } else {
                        $('#commentsList').prepend(commentHtml);
                    }
                } else {
                    $('#commentsList').prepend(commentHtml);
                }
                
                // Reload comments first page to ensure thread consistency
                $('#commentsList').empty();
                currentCommentsPage = 1;
                loadComments(currentCommentsPage);
                
                // Hide success message after 5 seconds
                setTimeout(() => {
                    $('#commentSuccess').addClass('d-none');
                }, 5000);

                // Clear reply state
                $('#parentCommentId').val('');
                $('#replyingTo').addClass('d-none');
            } else {
                onCommentFailure(response);
            }
            
            // Re-enable submit button
            const $submitBtn = $('#submitComment');
            $submitBtn.prop('disabled', false);
            $submitBtn.find('.spinner-border').addClass('d-none');
            $submitBtn.find('i').removeClass('d-none');
        }
        
        function onCommentFailure(response) {
            const $errorDiv = $('#commentError');
            $errorDiv.removeClass('d-none');
            
            if (response && response.responseJSON) {
                $errorDiv.text(response.responseJSON.message || 'An error occurred while submitting your comment.');
            } else {
                $errorDiv.text('An error occurred while submitting your comment. Please try again.');
            }
            
            // Re-enable submit button
            const $submitBtn = $('#submitComment');
            $submitBtn.prop('disabled', false);
            $submitBtn.find('.spinner-border').addClass('d-none');
            $submitBtn.find('i').removeClass('d-none');
        }
        
        let currentCommentsPage = 1;
        const pageSize = 5;
        const replyPreviewSize = 5;

        function updateCommentCount() {
            const topLevelCount = $('#commentsList .top-level-comment').length;
            $('.comment-count').text(`Comments (${topLevelCount})`);
        }

        // Initialize event handlers only once
        var eventHandlersInitialized = false;
        
        function wireReplyButtons() {
            if (!eventHandlersInitialized) {
                // Reply to a comment - use event delegation, attach only once
                $(document).on('click', '.comment-reply-btn', function() {
                    const $item = $(this).closest('.comment-item');
                    const id = $item.data('comment-id');
                    const name = $item.data('author-name');
                    $('#parentCommentId').val(id);
                    $('#replyingToName').text(name);
                    $('#replyingTo').removeClass('d-none');
                    $('#commentContent').focus();
                });
                
                // Load more replies - use event delegation, attach only once
                $(document).on('click', '.load-more-replies', function(){
                    const parentId = $(this).data('parent-id');
                    const $btn = $(this);
                    const $container = $(`.comment-replies[data-parent-id='${parentId}']`);
                    
                    // Prevent multiple clicks
                    if ($btn.prop('disabled')) {
                        return;
                    }
                    $btn.prop('disabled', true);
                    
                    $.ajax({
                        url: '@Url.Action("RepliesPartial", "Blog")',
                        data: { postId: @Model.Post.Id, parentCommentId: parentId, baseLevel: 1, _ts: Date.now() },
                        cache: false
                    }).done(function(html){
                        // Clear existing content before adding new content
                        $container.empty();
                        $container.html(html);
                        $btn.remove();
                    }).fail(function(){
                        $btn.prop('disabled', false);
                    });
                });
                
                eventHandlersInitialized = true;
            }
        }

        function loadComments(page) {
            $('#loadMoreComments').prop('disabled', true);
            $.ajax({
                url: '@Url.Action("CommentsPartial", "Blog")',
                data: { postId: @Model.Post.Id, page: page, pageSize: pageSize, replyPreviewSize: replyPreviewSize, _ts: Date.now() },
                cache: false
            }).done(function(html){
                const $temp = $('<div>').html(html);
                const hasMore = $temp.find('#commentsPageMeta').data('has-more') === true || $temp.find('#commentsPageMeta').data('has-more') === 'true';
                const nextPage = parseInt($temp.find('#commentsPageMeta').data('next-page')) || (page + 1);
                const chunk = $temp.find('#commentsPageChunk').html();
                $('#commentsList').append(chunk);
                updateCommentCount();
                wireReplyButtons();
                if (hasMore) {
                    $('#loadMoreComments').removeClass('d-none').off('click').on('click', function(){
                        currentCommentsPage = nextPage;
                        loadComments(currentCommentsPage);
                    }).prop('disabled', false);
                } else {
                    $('#loadMoreComments').addClass('d-none');
                }
            }).fail(function(){
                $('#loadMoreComments').addClass('d-none');
            });
        }

        $(document).ready(function() {
            // Handle form submission
            $('#commentForm').on('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    $(this).addClass('was-validated');
                    return false;
                }
                
                // Disable submit button and show spinner
                const $submitBtn = $('#submitComment');
                $submitBtn.prop('disabled', true);
                $submitBtn.find('i').addClass('d-none');
                $submitBtn.find('.spinner-border').removeClass('d-none');
                
                // Hide any previous error messages
                $('#commentError').addClass('d-none');
                
                return true;
            });

            wireReplyButtons();

            // Cancel reply
            $('#cancelReply').on('click', function() {
                $('#parentCommentId').val('');
                $('#replyingTo').addClass('d-none');
            });

            // Initial comments load
            $('#commentsList').empty();
            currentCommentsPage = 1;
            loadComments(currentCommentsPage);
        });
    </script>
    <script>
        // Social sharing functions
        function sharePost(platform) {
            const url = encodeURIComponent(window.location.href);
            const title = encodeURIComponent('@Model.Post.Title');

            let shareUrl = '';
            switch(platform) {
                case 'twitter':
                    shareUrl = `https://twitter.com/intent/tweet?url=${url}&text=${title}`;
                    break;
                case 'facebook':
                    shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
                    break;
            }

            if (shareUrl) {
                window.open(shareUrl, '_blank', 'width=600,height=400');
            }
        }

        function copyLink() {
            navigator.clipboard.writeText(window.location.href).then(() => {
                alert('Link copied to clipboard!');
            });
        }
    </script>
}

<style>
.post-content {
    line-height: 1.8;
}

.post-content h1, .post-content h2, .post-content h3, .post-content h4, .post-content h5, .post-content h6 {
    margin-top: 2rem;
    margin-bottom: 1rem;
}

.post-content p {
    margin-bottom: 1.5rem;
}

.post-content pre {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.375rem;
    overflow-x: auto;
}

.post-content blockquote {
    border-left: 4px solid #0d6efd;
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
}
</style>
