using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using TechBlog.Core.Entities;
using TechBlog.Core.Interfaces.Services;
using TechBlog.Infrastructure.Data;

namespace TechBlog.Infrastructure.Services
{
    public class RecaptchaService : IRecaptchaService
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly ApplicationDbContext _context;
        private readonly IConfiguration _configuration;
        private const string RecaptchaVerifyUrl = "https://www.google.com/recaptcha/api/siteverify";

        public RecaptchaService(
            IHttpClientFactory httpClientFactory,
            ApplicationDbContext context,
            IConfiguration configuration)
        {
            _httpClientFactory = httpClientFactory;
            _context = context;
            _configuration = configuration;
        }

        public async Task<bool> VerifyCaptchaAsync(string token, string action)
        {
            try
            {
                var settings = await GetSettingsAsync();
                
                // Check if reCAPTCHA is enabled for the specific action
                bool isActionEnabled = action.ToLower() switch
                {
                    "login" => settings.EnableForLogin,
                    "register" => settings.EnableForRegistration,
                    "comment" => settings.EnableForComments,
                    _ => false
                };
                
                if (!settings.IsEnabled || !isActionEnabled)
                    return true;

                var secretKey = settings.SecretKey ?? _configuration["Recaptcha:SecretKey"];
                if (string.IsNullOrEmpty(secretKey))
                    return false;

                using var httpClient = _httpClientFactory.CreateClient();
                var response = await httpClient.PostAsync($"{RecaptchaVerifyUrl}?secret={secretKey}&response={token}", null);
                
                if (!response.IsSuccessStatusCode)
                    return false;

                var responseContent = await response.Content.ReadAsStringAsync();
                var recaptchaResponse = JsonSerializer.Deserialize<RecaptchaResponse>(responseContent);

                if (recaptchaResponse == null || !recaptchaResponse.Success)
                    return false;

                // Verify the action matches
                if (!string.Equals(recaptchaResponse.Action, action, StringComparison.OrdinalIgnoreCase))
                    return false;

                // Verify the score meets the threshold
                return recaptchaResponse.Score >= settings.ScoreThreshold;
            }
            catch (Exception)
            {
                // Log the error in production
                return false;
            }
        }

        public async Task<RecaptchaSettings> GetSettingsAsync()
        {
            var settings = await _context.RecaptchaSettings.FirstOrDefaultAsync();
            if (settings == null)
            {
                // Create default settings if none exist
                settings = new RecaptchaSettings
                {
                    IsEnabled = false,
                    EnableForLogin = false,
                    EnableForRegistration = false,
                    EnableForComments = false,
                    ScoreThreshold = 0.5f,
                    CreatedAt = DateTime.UtcNow
                };
                _context.RecaptchaSettings.Add(settings);
                await _context.SaveChangesAsync();
            }
            return settings;
        }

        public async Task UpdateSettingsAsync(RecaptchaSettings settings)
        {
            var existingSettings = await _context.RecaptchaSettings.FirstOrDefaultAsync();
            if (existingSettings == null)
            {
                settings.CreatedAt = DateTime.UtcNow;
                _context.RecaptchaSettings.Add(settings);
            }
            else
            {
                existingSettings.SiteKey = settings.SiteKey;
                existingSettings.SecretKey = settings.SecretKey;
                existingSettings.IsEnabled = settings.IsEnabled;
                existingSettings.EnableForLogin = settings.EnableForLogin;
                existingSettings.EnableForRegistration = settings.EnableForRegistration;
                existingSettings.EnableForComments = settings.EnableForComments;
                existingSettings.ScoreThreshold = settings.ScoreThreshold;
                existingSettings.UpdatedAt = DateTime.UtcNow;
                _context.RecaptchaSettings.Update(existingSettings);
            }

            await _context.SaveChangesAsync();
        }
    }

    internal class RecaptchaResponse
    {
        public bool Success { get; set; }
        public float Score { get; set; }
        public string Action { get; set; }
        public DateTime ChallengeTime { get; set; }
        public string Hostname { get; set; }
        public string[] ErrorCodes { get; set; }
    }
}
